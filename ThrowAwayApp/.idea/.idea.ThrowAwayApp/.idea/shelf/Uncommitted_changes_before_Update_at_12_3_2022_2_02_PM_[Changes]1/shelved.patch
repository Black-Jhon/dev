Index: ../ConsoleATM/ConsoleATM/obj/Debug/ConsoleATM.csproj.FileListAbsolute.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/obj/Debug/ConsoleATM.csproj.FileListAbsolute.txt b/../ConsoleATM/ConsoleATM/obj/Debug/ConsoleATM.csproj.FileListAbsolute.txt
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/obj/Debug/ConsoleATM.csproj.FileListAbsolute.txt	
@@ -0,0 +1,7 @@
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\bin\Debug\ConsoleATM.exe
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\bin\Debug\ConsoleATM.pdb
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\obj\Debug\ConsoleATM.csproj.AssemblyReference.cache
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\obj\Debug\ConsoleATM.csproj.SuggestedBindingRedirects.cache
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\obj\Debug\ConsoleATM.csproj.CoreCompileInputs.cache
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\obj\Debug\ConsoleATM.exe
+C:\Users\John\Documents\BEZAO-VS\ConsoleATM\ConsoleATM\obj\Debug\ConsoleATM.pdb
Index: ../ConsoleATM/ConsoleATM/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs b/../ConsoleATM/ConsoleATM/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs	
@@ -0,0 +1,4 @@
+// <autogenerated />
+using System;
+using System.Reflection;
+[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.8", FrameworkDisplayName = ".NET Framework 4.8")]
Index: ../ConsoleATM/ConsoleATM/Properties/AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Properties/AssemblyInfo.cs b/../ConsoleATM/ConsoleATM/Properties/AssemblyInfo.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Properties/AssemblyInfo.cs	
@@ -0,0 +1,35 @@
+using System.Reflection;
+using System.Runtime.InteropServices;
+
+// General Information about an assembly is controlled through the following 
+// set of attributes. Change these attribute values to modify the information
+// associated with an assembly.
+[assembly: AssemblyTitle("ConsoleATM")]
+[assembly: AssemblyDescription("")]
+[assembly: AssemblyConfiguration("")]
+[assembly: AssemblyCompany("")]
+[assembly: AssemblyProduct("ConsoleATM")]
+[assembly: AssemblyCopyright("Copyright Â©  2022")]
+[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCulture("")]
+
+// Setting ComVisible to false makes the types in this assembly not visible 
+// to COM components.  If you need to access a type in this assembly from 
+// COM, set the ComVisible attribute to true on that type.
+[assembly: ComVisible(false)]
+
+// The following GUID is for the ID of the typelib if this project is exposed to COM
+[assembly: Guid("08DDF6B1-28A2-41E3-B3DD-D6AB5AD96958")]
+
+// Version information for an assembly consists of the following four values:
+//
+//      Major Version
+//      Minor Version 
+//      Build Number
+//      Revision
+//
+// You can specify all the values or you can default the Build and Revision Numbers 
+// by using the '*' as shown below:
+// [assembly: AssemblyVersion("1.0.*")]
+[assembly: AssemblyVersion("1.0.0.0")]
+[assembly: AssemblyFileVersion("1.0.0.0")]
\ No newline at end of file
Index: ../ConsoleATM/ConsoleATM/AppUI/UserValidator.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/AppUI/UserValidator.cs b/../ConsoleATM/ConsoleATM/AppUI/UserValidator.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/AppUI/UserValidator.cs	
@@ -0,0 +1,38 @@
+using System.ComponentModel;
+
+namespace ConsoleATM.AppUI
+{
+    public static class UserValidator
+    {
+        // Generics explains the Type concepts better
+        public static T Convert<T>(string prompt)
+        {
+            bool _valid = false;
+            string _userInput;
+
+            while (!_valid)
+            {
+                _userInput = AppUtility.GetUserInput(prompt);
+
+                try
+                {
+                    var converter = TypeDescriptor.GetConverter(typeof(T));
+                    if (converter != null)
+                    {
+                        return (T)converter.ConvertFromString(_userInput);
+                    }
+                    else
+                    {
+                        return default;
+                    }
+                }
+                catch
+                {
+                    /* Console.WriteLine("\nInvalid input. You go need try am again.");*/
+                    AppUtility.PrintMessage("\nInvalid input. Be like you go like try am again.", false);
+                }
+            }
+            return default;
+        }
+    }
+}
Index: ../ConsoleATM/ConsoleATM/ConsoleATM.csproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/ConsoleATM.csproj b/../ConsoleATM/ConsoleATM/ConsoleATM.csproj
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/ConsoleATM.csproj	
@@ -0,0 +1,66 @@
+<?xml version="1.0" encoding="utf-8"?>
+<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
+    <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
+    <PropertyGroup>
+        <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
+        <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
+        <ProjectGuid>{08DDF6B1-28A2-41E3-B3DD-D6AB5AD96958}</ProjectGuid>
+        <OutputType>Exe</OutputType>
+        <AppDesignerFolder>Properties</AppDesignerFolder>
+        <RootNamespace>ConsoleATM</RootNamespace>
+        <AssemblyName>ConsoleATM</AssemblyName>
+        <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
+        <FileAlignment>512</FileAlignment>
+        <AutoGenerateBindingRedirects>true</AutoGenerateBindingRedirects>
+    </PropertyGroup>
+    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
+        <PlatformTarget>AnyCPU</PlatformTarget>
+        <DebugSymbols>true</DebugSymbols>
+        <DebugType>full</DebugType>
+        <Optimize>false</Optimize>
+        <OutputPath>bin\Debug\</OutputPath>
+        <DefineConstants>DEBUG;TRACE</DefineConstants>
+        <ErrorReport>prompt</ErrorReport>
+        <WarningLevel>4</WarningLevel>
+    </PropertyGroup>
+    <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
+        <PlatformTarget>AnyCPU</PlatformTarget>
+        <DebugType>pdbonly</DebugType>
+        <Optimize>true</Optimize>
+        <OutputPath>bin\Release\</OutputPath>
+        <DefineConstants>TRACE</DefineConstants>
+        <ErrorReport>prompt</ErrorReport>
+        <WarningLevel>4</WarningLevel>
+    </PropertyGroup>
+    <ItemGroup>
+        <Reference Include="System" />
+        <Reference Include="System.Core" />
+        <Reference Include="System.Data" />
+        <Reference Include="System.Xml" />
+    </ItemGroup>
+    <ItemGroup>
+        <Compile Include="AppUI\AppUtility.cs" />
+        <Compile Include="AppUI\DisplayScreen.cs" />
+        <Compile Include="AppUI\UserValidator.cs" />
+        <Compile Include="App\ATMApp.cs" />
+        <Compile Include="App\Program.cs" />
+        <Compile Include="Domain\Entities\InternalTransfer.cs" />
+        <Compile Include="Domain\Entities\Transaction.cs" />
+        <Compile Include="Domain\Entities\UserAccount.cs" />
+        <Compile Include="Domain\Enums\AppMenu.cs" />
+        <Compile Include="Domain\Enums\TransactionType.cs" />
+        <Compile Include="Domain\Interfaces\ITransaction.cs" />
+        <Compile Include="Domain\Interfaces\IUserAccountActions.cs" />
+        <Compile Include="Domain\Interfaces\IUserLogin.cs" />
+        <Compile Include="Properties\AssemblyInfo.cs" />
+    </ItemGroup>
+    <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
+    <!-- To modify your build process, add your task inside one of the targets below and uncomment it. 
+         Other similar extension points exist, see Microsoft.Common.targets.
+    <Target Name="BeforeBuild">
+    </Target>
+    <Target Name="AfterBuild">
+    </Target>
+    -->
+
+</Project>
Index: ../ConsoleATM/ConsoleATM/AppUI/DisplayScreen.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/AppUI/DisplayScreen.cs b/../ConsoleATM/ConsoleATM/AppUI/DisplayScreen.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/AppUI/DisplayScreen.cs	
@@ -0,0 +1,131 @@
+using System;
+using ConsoleATM.Domain.Entities;
+using ConsoleATM.AppUI;
+
+namespace ConsoleATM.AppUI
+{
+    // static because, I wouldn't want to instantiate the class before using it
+    public class DisplayScreen
+    {
+        internal static string cur = "N ";
+
+        internal static void Welcome()
+        {
+            Console.Clear();
+            Console.ForegroundColor = ConsoleColor.White;
+            Console.Title = "My ATM Application!";
+
+            Console.WriteLine("\nHello there! Welcome to Jhon's Remote Banking App.");
+
+            Console.WriteLine("\nDisclaimer: Know that this can accept and validate actual ATM cards.");
+            Console.WriteLine("Welcome! Please insert your ATM card");
+
+            // App utility
+            AppUtility.ClickEnterToContinue();
+        }
+
+        internal static UserAccount UserLoginForm()
+        {
+            UserAccount tempUserAccount = new UserAccount();
+
+            tempUserAccount._CardNumber = UserValidator.Convert<long>("your card number");
+            tempUserAccount._CardPin = Convert.ToInt32(AppUtility.GetSecretInput("Enter your account pin"));
+            return tempUserAccount;
+        }
+
+        internal static void LoginProgress()
+        {
+            // Login progress dot animation
+            AppUtility.PrintDotAnimation();
+        }
+
+        internal static void PrintLockScreen()
+        {
+            Console.Clear();
+            AppUtility.PrintMessage(
+                "Oops! Your account is locked. Please go to nearest branch to unlock your account.");
+            AppUtility.ClickEnterToContinue();
+            Environment.Exit(1);
+        }
+
+        internal static void WelcomeCustomer(string fullName)
+        {
+            Console.WriteLine($"Welcome back, {fullName}");
+            AppUtility.ClickEnterToContinue();
+        }
+
+        internal static void DisplayAppMenu()
+        {
+            Console.Clear();
+            Console.WriteLine("\n\nTransaction Menu");
+            Console.WriteLine("................\n");
+            Console.WriteLine("0. Account Balance");
+            Console.WriteLine("1. Cash Deposit");
+            Console.WriteLine("2. Withdrawal");
+            Console.WriteLine("3. Transfer");
+            Console.WriteLine("4. Transactions");
+            Console.WriteLine("5. Logout");
+        }
+
+        internal static void LogOutProgress()
+        {
+            Console.WriteLine("Thank you for your patronage");
+            AppUtility.PrintDotAnimation();
+            Console.Clear();
+        }
+
+        internal static int SelectAmount()
+        {
+            Console.WriteLine($"1. {cur}500                5. {cur}10,000");
+            Console.WriteLine($"2. {cur}1,000              6. {cur}15,000");
+            Console.WriteLine($"3. {cur}2,000              7. {cur}20,000");
+            Console.WriteLine($"4. {cur}5,000              8. {cur}40,000");
+            Console.WriteLine($"0: Other");
+
+            int selectedAmount = UserValidator.Convert<int>("Option: ");
+            switch (selectedAmount)
+            {
+                case 1:
+                    return 500;
+                    break;
+                case 2:
+                    return 1000;
+                    break;
+                case 3:
+                    return 2000;
+                    break;
+                case 4:
+                    return 5000;
+                    break;
+                case 5:
+                    return 10000;
+                    break;
+                case 6:
+                    return 15000;
+                    break;
+                case 7:
+                    return 20000;
+                    break;
+                case 8:
+                    return 40000;
+                    break;
+                case 0:
+                    return 0;
+                    break;
+                default:
+                    AppUtility.PrintMessage("Invalid input. Please try again.", false);
+                    return -1;
+                    break;
+            }
+        }
+
+        internal InternalTransfer InternalTransferForm()
+        {
+            var internalTransfer = new InternalTransfer();
+            internalTransfer.RecipientBankAccountNumber = UserValidator.Convert<long>($"recipient's account number: ");
+            internalTransfer.TransferAmount = UserValidator.Convert<decimal>($"amount {cur}");
+            internalTransfer.RecipientBankAccountName = AppUtility.GetUserInput($"recipient's name:");
+            return internalTransfer; // Using this to collect the data for the transfer
+        }
+    }
+}
Index: ../ConsoleATM/ConsoleATM/AppUI/AppUtility.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/AppUI/AppUtility.cs b/../ConsoleATM/ConsoleATM/AppUI/AppUtility.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/AppUI/AppUtility.cs	
@@ -0,0 +1,109 @@
+using System;
+using System.Globalization;
+using System.Text;
+using System.Threading;
+
+namespace ConsoleATM.AppUI
+{
+    // This class was created to allow for decoupling
+    public static class AppUtility
+    {
+        private static long transactionId;
+        private static CultureInfo culture = new CultureInfo("en-US");
+
+        public static long GetTransactionId()
+        {
+            return ++transactionId;
+        }
+
+        public static string GetSecretInput(string prompt)
+        {
+            bool isPrompt = true;
+            string asterics = "";
+
+            StringBuilder input = new StringBuilder();
+
+            while (true)
+            {
+                if (isPrompt) Console.WriteLine(prompt);
+                isPrompt = false;
+
+                ConsoleKeyInfo
+                    inputKey = Console.ReadKey(true); // Reads key strokes. True means, key inputs should be hidden
+
+                if (inputKey.Key == ConsoleKey.Enter)
+                {
+                    if (input.Length == 6)
+                    {
+                        break;
+                    }
+                    else
+                    {
+                        PrintMessage("\nPlease enter 6 digits.", false);
+                        isPrompt = true;
+                        input.Clear();
+                        continue;
+                    }
+                }
+
+                if (inputKey.Key == ConsoleKey.Backspace && input.Length > 0)
+                {
+                    input.Remove(input.Length - 1, 1);
+                }
+                else if (inputKey.Key != ConsoleKey.Backspace)
+                {
+                    input.Append(inputKey.KeyChar);
+                    Console.Write(asterics + "*");
+                }
+            }
+
+            return input.ToString();
+        }
+
+        public static void PrintMessage(string message, bool success = true)
+        {
+            if (success)
+            {
+                Console.ForegroundColor = ConsoleColor.Green;
+            }
+            else
+            {
+                Console.ForegroundColor = ConsoleColor.Red;
+            }
+
+            Console.WriteLine(message);
+            Console.ResetColor();
+            ClickEnterToContinue();
+        }
+
+        public static string GetUserInput(string prompt)
+        {
+            Console.WriteLine($"\nEnter {prompt}");
+            return Console.ReadLine();
+        }
+
+
+        public static void ClickEnterToContinue()
+        {
+            Console.WriteLine($"\nPlease press enter to continue");
+            Console.ReadLine();
+        }
+
+        public static void PrintDotAnimation(int timer = 10)
+        {
+            Console.WriteLine("\nChecking card number and pin...");
+            for (int i = 0; i < timer; i++)
+            {
+                Console.Write(".");
+                Thread.Sleep(200); //Delays the timer for 200 milliseconds
+            }
+
+            Console.Clear();
+        }
+
+        public static string FormatAmount(decimal amt)
+        {
+            return String.Format(culture, "{0:C2}", amt);
+        }
+    }
+}
Index: ../ConsoleATM/ConsoleATM/App/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/App/Program.cs b/../ConsoleATM/ConsoleATM/App/Program.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/App/Program.cs	
@@ -0,0 +1,12 @@
+namespace ConsoleATM.App
+{
+    internal class Program
+    {
+        public static void Main(string[] args)
+        {
+            ATMApp atmApp = new ATMApp();
+            atmApp.InitializeData();
+            atmApp.Run();
+        }
+    }
+}
Index: ../ConsoleATM/ConsoleATM/App/ATMApp.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/App/ATMApp.cs b/../ConsoleATM/ConsoleATM/App/ATMApp.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/App/ATMApp.cs	
@@ -0,0 +1,303 @@
+using System;
+using System.Collections.Generic;
+using ConsoleATM.AppUI;
+using ConsoleATM.Domain.Entities;
+using ConsoleATM.Domain.Enums;
+using ConsoleATM.Domain.Interfaces;
+
+namespace ConsoleATM.App
+{
+    internal class ATMApp : IUserLogin, IUserAccountActions, ITransaction
+    {
+        private List<UserAccount> userAccountList;
+        private UserAccount selectedAccount;
+        private List<Transaction> listOfTransactions;
+        private const decimal minimumKeptAmount = 500;
+
+        public void Run()
+        {
+            DisplayScreen.Welcome();
+            CheckUserCardNumberAndPassword();
+            DisplayScreen.WelcomeCustomer(selectedAccount._FullName);
+            DisplayScreen.DisplayAppMenu();
+            ProcessMenuOptions();
+        }
+
+        public void InitializeData()
+        {
+            userAccountList = new List<UserAccount>()
+            {
+                new UserAccount
+                {
+                    _Id = 1, _FullName = "John Chukwu", _AccountNumber = 0001, _CardNumber = 1111, _CardPin = 222222,
+                    _AccountBalance = 50000.00m, _IsLocked = false
+                },
+                new UserAccount
+                {
+                    _Id = 2, _FullName = "Peter Okoye", _AccountNumber = 0002, _CardNumber = 2222, _CardPin = 333333,
+                    _AccountBalance = 5000.00m, _IsLocked = false
+                },
+                new UserAccount
+                {
+                    _Id = 3, _FullName = "Mark Engees", _AccountNumber = 0003, _CardNumber = 3333, _CardPin = 444444,
+                    _AccountBalance = 10000.00m, _IsLocked = true
+                },
+                new UserAccount
+                {
+                    _Id = 4, _FullName = "Jude Nnam", _AccountNumber = 0004, _CardNumber = 4444, _CardPin = 555555,
+                    _AccountBalance = 60000.00m, _IsLocked = false
+                }
+            };
+            listOfTransactions = new List<Transaction>();
+        }
+
+        public void CheckUserCardNumberAndPassword()
+        {
+            bool isCorrectLogin = false;
+            while (isCorrectLogin == false)
+            {
+                UserAccount inputAccount = DisplayScreen.UserLoginForm();
+                DisplayScreen.LoginProgress();
+                foreach (UserAccount account in userAccountList)
+                {
+                    selectedAccount = account;
+                    if (inputAccount._CardNumber.Equals(selectedAccount._CardNumber))
+                    {
+                        selectedAccount._TotalLogin++;
+
+                        if (inputAccount._CardPin.Equals(selectedAccount._CardPin))
+                        {
+                            selectedAccount = account;
+
+                            if (selectedAccount._IsLocked || selectedAccount._TotalLogin > 3)
+                            {
+                                // Print lock screen
+                                DisplayScreen.PrintLockScreen();
+                            }
+                            else
+                            {
+                                selectedAccount._TotalLogin = 0;
+                                isCorrectLogin = true;
+                                break;
+                            }
+                        }
+                    }
+                }
+
+                if (isCorrectLogin == false)
+                {
+                    AppUtility.PrintMessage("\nInvalid card number or PIN.", false);
+                    selectedAccount._IsLocked = selectedAccount._TotalLogin == 3;
+                    if (selectedAccount._IsLocked)
+                    {
+                        DisplayScreen.PrintLockScreen();
+                    }
+                }
+
+                Console.Clear();
+            }
+        }
+
+        private void ProcessMenuOptions()
+        {
+            switch (UserValidator.Convert<int>("an option to continue"))
+            {
+                case (int)AppMenu.CheckBalance:
+                    CheckBalance();
+                    break;
+                case (int)AppMenu.PlaceDeposit:
+                    PlaceDeposit();
+                    break;
+                case (int)AppMenu.MakeWithdrawal:
+                    MakeWithDrawal();
+                    break;
+                case (int)AppMenu.InternalTransfer:
+                    Console.WriteLine("Making transfer...");
+                    break;
+                case (int)AppMenu.ViewTransaction:
+                    Console.WriteLine("Loading transactions...");
+                    break;
+                case (int)AppMenu.Logout:
+                    DisplayScreen.LoginProgress();
+                    AppUtility.PrintMessage("You successfully logged out. Please collect your ATM card.");
+                    Run();
+                    break;
+                default:
+                    AppUtility.PrintMessage("Invalid option", false);
+                    break;
+            }
+        }
+
+        public void CheckBalance()
+        {
+            AppUtility.PrintMessage(
+                $"Your account balance is: {AppUtility.FormatAmount(selectedAccount._AccountBalance)}");
+        }
+
+        public void PlaceDeposit()
+        {
+            Console.WriteLine($"\nOnly multiples of 500 and 1000 are allowed!");
+            var transactionAmt = UserValidator.Convert<int>($"amount {DisplayScreen.cur}");
+
+            //Simulate counting
+            Console.WriteLine($"\nChecking and counting bank notes.");
+            AppUtility.PrintDotAnimation();
+            Console.WriteLine("");
+
+            if (transactionAmt <= 0)
+            {
+                AppUtility.PrintMessage("Amount needs to be greater than zero. Try again.", false);
+                return;
+            }
+
+            if (transactionAmt % 500 != 0)
+            {
+                AppUtility.PrintMessage("Enter deposit amount in multiples of 500 or 1000. Please try again.");
+            }
+
+            //Check if user wishes to continue
+            if (PreviewBankNoteCount(transactionAmt) == false)
+            {
+                AppUtility.PrintMessage($"You have cancelled your action.", false);
+                return;
+            }
+
+            //Bind transaction details to transaction object
+            InsertTranction(selectedAccount._Id, TransactionType.Deposit, transactionAmt, "");
+
+            //Update account balance
+            selectedAccount._AccountBalance += transactionAmt;
+
+            //Display success message
+            AppUtility.PrintMessage($"Your deposit of {AppUtility.FormatAmount(transactionAmt)} was successful.", true);
+        }
+
+        public void MakeWithDrawal()
+        {
+            var transactionAmount = 0;
+            int selectedAmount = DisplayScreen.SelectAmount();
+
+            if (selectedAmount == -1)
+            {
+                selectedAmount = DisplayScreen.SelectAmount();
+            }
+            else if (selectedAmount != 0)
+            {
+                transactionAmount = selectedAmount;
+            }
+            else
+            {
+                transactionAmount = UserValidator.Convert<int>($"amount {DisplayScreen.cur}");
+            }
+
+            // input validation
+            if (transactionAmount <= 0)
+            {
+                AppUtility.PrintMessage($"Amount needs to be greater than zero. Please try again.", false);
+                return;
+            }
+
+            if (transactionAmount % 500 != 0)
+            {
+                AppUtility.PrintMessage($"You can only withdraw amount in multiples of 500 and 1000. Please try again",
+                    false);
+                return;
+            }
+
+            // Business logic validation
+            if (transactionAmount > selectedAccount._AccountBalance)
+            {
+                AppUtility.PrintMessage(
+                    $"Withdrawal failed! Your balance is too low to withdraw {AppUtility.FormatAmount(transactionAmount)}",
+                    false);
+                return;
+            }
+
+            if ((selectedAccount._AccountBalance - transactionAmount) < minimumKeptAmount)
+            {
+                AppUtility.PrintMessage(
+                    $"Withdrawal failed! Your account needs to have a minimum of {AppUtility.FormatAmount(minimumKeptAmount)}",
+                    false);
+                return;
+            }
+
+            // Bind withdrawal details to transaction object
+            InsertTranction(selectedAccount._Id, TransactionType.WithDrawal, -transactionAmount, "");
+
+            // Update account balance 
+            selectedAccount._AccountBalance -= transactionAmount;
+
+            // Success message
+            AppUtility.PrintMessage($"You have successfully withdrawn {AppUtility.FormatAmount(transactionAmount)}",
+                true);
+        }
+
+        public bool PreviewBankNoteCount(int amount)
+        {
+            int thousandNoteCount = amount / 1000;
+            int fiveHundredNotesCount = (amount % 1000) / 500;
+
+            Console.WriteLine("\nSummary: ");
+            Console.WriteLine($"{DisplayScreen.cur}1000 X {thousandNoteCount} = {1000 * thousandNoteCount}");
+            Console.WriteLine($"{DisplayScreen.cur}500 X {fiveHundredNotesCount} = {500 * fiveHundredNotesCount}");
+            Console.WriteLine($"Total amount: {AppUtility.FormatAmount(amount)}\n\n");
+
+            int opt = UserValidator.Convert<int>("Enter 1 to confirm");
+            return opt.Equals(1);
+        }
+
+        public void InsertTranction(long _userBankAccountId, TransactionType _tranType, decimal _tranAmount,
+            string _desc)
+        {
+            //Create a new transaction object
+            var transaction = new Transaction()
+            {
+                TransactionId = AppUtility.GetTransactionId(),
+                UserBankAccountId = _userBankAccountId,
+                TransactionDate = DateTime.Now,
+                TransactionType = _tranType,
+                TransactionAmount = _tranAmount,
+                Description = _desc
+            };
+
+            //Add transaction object to the list
+            listOfTransactions.Add(transaction);
+        }
+
+        public void ViewTransaction()
+        {
+            var transactionAmount = 0;
+            int selectedAmount = DisplayScreen.SelectAmount();
+            if (selectedAmount == -1)
+            {
+                selectedAmount = DisplayScreen.SelectAmount();
+            }
+            else if (selectedAmount != 0)
+            {
+                transactionAmount = selectedAmount;
+            }
+            else
+            {
+                transactionAmount = UserValidator.Convert<int>($"amount {DisplayScreen.cur}");
+            }
+
+            //input validation
+            if (transactionAmount <= 0)
+            {
+                AppUtility.PrintMessage("Amount needs to be greater than zero.", false);
+                return;
+            }
+
+            if (transactionAmount % 500 != 0)
+            {
+                AppUtility.PrintMessage("You can only withdraw in the multiple of 500 or 1000", false);
+                return;
+            }
+        }
+
+        private void ProcessInternalTransfer(InternalTransfer internalTransfer)
+        {
+            Console.WriteLine("hello transfer processing");
+        }
+    }
+}
Index: ../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/.gitignore b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/.gitignore
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/.gitignore	
@@ -0,0 +1,13 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Rider ignored files
+/projectSettingsUpdater.xml
+/modules.xml
+/.idea.ConsoleATM.iml
+/contentModel.xml
+# Editor-based HTTP Client requests
+/httpRequests/
+# Datasource local storage ignored files
+/dataSources/
+/dataSources.local.xml
Index: ../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/vcs.xml b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/indexLayout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/indexLayout.xml b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/indexLayout.xml
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/.idea/.idea.ConsoleATM.dir/.idea/indexLayout.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="UserContentModel">
+    <attachedFolders />
+    <explicitIncludes />
+    <explicitExcludes />
+  </component>
+</project>
\ No newline at end of file
Index: ../ConsoleATM/.idea/.idea.ConsoleATM/.idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/.idea/.idea.ConsoleATM/.idea/workspace.xml b/../ConsoleATM/.idea/.idea.ConsoleATM/.idea/workspace.xml
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/.idea/.idea.ConsoleATM/.idea/workspace.xml	
@@ -0,0 +1,123 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AutoGeneratedRunConfigurationManager">
+    <projectFile>ConsoleATM/ConsoleATM.csproj</projectFile>
+  </component>
+  <component name="ChangeListManager">
+    <list default="true" id="3682f45f-7c11-44cf-8aed-35f5452955f5" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.ConsoleATM.dir/.idea/.gitignore" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.ConsoleATM.dir/.idea/indexLayout.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.ConsoleATM.dir/.idea/vcs.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/.idea/.idea.ConsoleATM/.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/ConsoleATM.csproj" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Entities/InternalTransfer.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Entities/Transaction.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Entities/UserAccount.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Enums/AppMenu.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Enums/TransactionType.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Interfaces/ITransaction.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Interfaces/IUserAccountActions.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Domain/Interfaces/IUserLogin.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/Properties/AssemblyInfo.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/bin/Debug/ConsoleATM.exe" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/bin/Debug/ConsoleATM.pdb" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.csproj.AssemblyReference.cache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.csproj.CoreCompileInputs.cache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.csproj.FileListAbsolute.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.csproj.SuggestedBindingRedirects.cache" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.exe" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleATM/obj/Debug/ConsoleATM.pdb" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../MyATMAPP/.idea/.idea.MyATMAPP/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../MyATMAPP/.idea/.idea.MyATMAPP/.idea/workspace.xml" afterDir="false" />
+    </list>
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="HighlightingSettingsPerFile">
+    <setting file="file://$PROJECT_DIR$/ConsoleATM/Domain/Entities/InternalTransfer.cs" root0="SKIP_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/ConsoleATM/Domain/Entities/Transaction.cs" root0="SKIP_HIGHLIGHTING" />
+    <setting file="file://$PROJECT_DIR$/ConsoleATM/Domain/Entities/UserAccount.cs" root0="SKIP_HIGHLIGHTING" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
+  <component name="ProjectId" id="2IOyEbQ5UvpvAKlMstKLlBxessb" />
+  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
+    <ConfirmationsSetting value="2" id="Add" />
+  </component>
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "ASKED_ADD_EXTERNAL_FILES": "true",
+    "ASKED_SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "RunOnceActivity.OpenProjectViewOnStart": "true",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "WebServerToolWindowFactoryState": "false",
+    "node.js.detected.package.eslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "rider.code.cleanup.on.save": "true",
+    "rider.code.cleanup.on.save.profile": "Built-in: Reformat Code",
+    "settings.editor.selected.configurable": "actions.on.save",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="RunManager">
+    <configuration name="ConsoleATM" type="DotNetProject" factoryName=".NET Project">
+      <option name="EXE_PATH" value="" />
+      <option name="PROGRAM_PARAMETERS" value="" />
+      <option name="WORKING_DIRECTORY" value="" />
+      <option name="PASS_PARENT_ENVS" value="1" />
+      <option name="USE_EXTERNAL_CONSOLE" value="0" />
+      <option name="USE_MONO" value="0" />
+      <option name="RUNTIME_ARGUMENTS" value="" />
+      <option name="PROJECT_PATH" value="$PROJECT_DIR$/ConsoleATM/ConsoleATM.csproj" />
+      <option name="PROJECT_EXE_PATH_TRACKING" value="1" />
+      <option name="PROJECT_ARGUMENTS_TRACKING" value="1" />
+      <option name="PROJECT_WORKING_DIRECTORY_TRACKING" value="1" />
+      <option name="PROJECT_KIND" value="Console" />
+      <option name="PROJECT_TFM" value="" />
+      <method v="2">
+        <option name="Build" />
+      </method>
+    </configuration>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="3682f45f-7c11-44cf-8aed-35f5452955f5" name="Changes" comment="" />
+      <created>1670066814178</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1670066814178</updated>
+      <workItem from="1670066830678" duration="104000" />
+      <workItem from="1670066963365" duration="3903000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+  <component name="UnityCheckinConfiguration" checkUnsavedScenes="true" />
+  <component name="UnityUnitTestConfiguration" currentTestLauncher="NUnit" />
+  <component name="Vcs.Log.Tabs.Properties">
+    <option name="TAB_STATES">
+      <map>
+        <entry key="MAIN">
+          <value>
+            <State />
+          </value>
+        </entry>
+      </map>
+    </option>
+  </component>
+  <component name="VcsManagerConfiguration">
+    <option name="ADD_EXTERNAL_FILES_SILENTLY" value="true" />
+    <option name="CLEAR_INITIAL_COMMIT_MESSAGE" value="true" />
+  </component>
+</project>
\ No newline at end of file
Index: ThrowAwayApp/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ThrowAwayApp/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs b/ThrowAwayApp/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs
new file mode 100644
--- /dev/null	
+++ b/ThrowAwayApp/obj/Debug/.NETFramework,Version=v4.8.AssemblyAttributes.cs	
@@ -0,0 +1,4 @@
+// <autogenerated />
+using System;
+using System.Reflection;
+[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.8", FrameworkDisplayName = ".NET Framework 4.8")]
Index: ../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserAccountActions.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserAccountActions.cs b/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserAccountActions.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserAccountActions.cs	
@@ -0,0 +1,11 @@
+namespace ConsoleATM.Domain.Interfaces
+{
+    public interface IUserAccountActions
+    {
+        void CheckBalance();
+        void PlaceDeposit();
+        void MakeWithDrawal();
+    }
+}
+
+
Index: ../ConsoleATM/ConsoleATM/Domain/Interfaces/ITransaction.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Interfaces/ITransaction.cs b/../ConsoleATM/ConsoleATM/Domain/Interfaces/ITransaction.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Interfaces/ITransaction.cs	
@@ -0,0 +1,12 @@
+using ConsoleATM.Domain.Enums;
+
+namespace ConsoleATM.Domain.Interfaces
+{
+    public interface ITransaction
+    {
+        void InsertTranction(long _userBankAccountId, TransactionType _tranType, decimal _tranAmount, string _desc);
+        void ViewTransaction();
+    }
+
+}
+
Index: ../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserLogin.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserLogin.cs b/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserLogin.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Interfaces/IUserLogin.cs	
@@ -0,0 +1,7 @@
+namespace ConsoleATM.Domain.Interfaces
+{
+    public interface IUserLogin
+    {
+        void CheckUserCardNumberAndPassword();
+    }
+}
Index: .idea/.idea.ThrowAwayApp/.idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.ThrowAwayApp/.idea/vcs.xml b/.idea/.idea.ThrowAwayApp/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/.idea.ThrowAwayApp/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: ../ConsoleATM/ConsoleATM/Domain/Entities/InternalTransfer.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Entities/InternalTransfer.cs b/../ConsoleATM/ConsoleATM/Domain/Entities/InternalTransfer.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Entities/InternalTransfer.cs	
@@ -0,0 +1,11 @@
+namespace ConsoleATM.Domain.Entities
+{
+    public class InternalTransfer
+    {
+        public decimal TransferAmount { get; set; }
+        public long RecipientBankAccountNumber { get; set; }
+        public string RecipientBankAccountName { get; set; }
+    }
+
+}
+
Index: .idea/.idea.ThrowAwayApp/.idea/projectSettingsUpdater.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.ThrowAwayApp/.idea/projectSettingsUpdater.xml b/.idea/.idea.ThrowAwayApp/.idea/projectSettingsUpdater.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/.idea.ThrowAwayApp/.idea/projectSettingsUpdater.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RiderProjectSettingsUpdater">
+    <option name="vcsConfiguration" value="2" />
+  </component>
+</project>
\ No newline at end of file
Index: ../ConsoleATM/ConsoleATM/Domain/Entities/UserAccount.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Entities/UserAccount.cs b/../ConsoleATM/ConsoleATM/Domain/Entities/UserAccount.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Entities/UserAccount.cs	
@@ -0,0 +1,14 @@
+namespace ConsoleATM.Domain.Entities
+{
+    public class UserAccount
+    {
+        public int _Id { get; set; }
+        public long _CardNumber { get; set; }
+        public int _CardPin { get; set; }
+        public long _AccountNumber { get; set; }
+        public string _FullName { get; set; }
+        public decimal _AccountBalance { get; set; }
+        public int _TotalLogin { get; set; }
+        public bool _IsLocked { get; set; }
+    }
+}
Index: ../ConsoleATM/ConsoleATM/Domain/Entities/Transaction.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Entities/Transaction.cs b/../ConsoleATM/ConsoleATM/Domain/Entities/Transaction.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Entities/Transaction.cs	
@@ -0,0 +1,17 @@
+using System;
+using ConsoleATM.Domain.Enums;
+
+namespace ConsoleATM.Domain.Entities
+{
+    public class Transaction
+    {
+        public long TransactionId { get; set; }
+        public long UserBankAccountId { get; set; }
+        public DateTime TransactionDate { get; set; }
+        public TransactionType TransactionType { get; set; }
+        public string Description { get; set; }
+        public Decimal TransactionAmount { get; set; }
+    }
+
+}
+
Index: .idea/.idea.ThrowAwayApp/.idea/indexLayout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.idea.ThrowAwayApp/.idea/indexLayout.xml b/.idea/.idea.ThrowAwayApp/.idea/indexLayout.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/.idea.ThrowAwayApp/.idea/indexLayout.xml	
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="UserContentModel">
+    <attachedFolders />
+    <explicitIncludes />
+    <explicitExcludes />
+  </component>
+</project>
\ No newline at end of file
Index: ../ConsoleATM/ConsoleATM/Domain/Enums/TransactionType.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Enums/TransactionType.cs b/../ConsoleATM/ConsoleATM/Domain/Enums/TransactionType.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Enums/TransactionType.cs	
@@ -0,0 +1,11 @@
+namespace ConsoleATM.Domain.Enums
+{
+    public enum TransactionType
+    {
+        Deposit,
+        WithDrawal,
+        Transfer
+    }
+}
+
+
Index: ../ConsoleATM/ConsoleATM/Domain/Enums/AppMenu.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../ConsoleATM/ConsoleATM/Domain/Enums/AppMenu.cs b/../ConsoleATM/ConsoleATM/Domain/Enums/AppMenu.cs
new file mode 100644
--- /dev/null	
+++ b/../ConsoleATM/ConsoleATM/Domain/Enums/AppMenu.cs	
@@ -0,0 +1,14 @@
+namespace ConsoleATM.Domain.Enums
+{
+    public enum AppMenu
+    {
+        CheckBalance, // This has an initial value of 0, etc
+        PlaceDeposit,
+        MakeWithdrawal,
+        InternalTransfer,
+        ViewTransaction,
+        Logout
+    }
+}
+
+
